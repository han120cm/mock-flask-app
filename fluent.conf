# Prometheus monitoring plugins
<source>
  @type prometheus_tail_monitor
</source>

<source>
  @type prometheus
  bind 0.0.0.0
  port 24231
  metrics_path /metrics
</source>

# Nginx access log parsing
<source>
  @type tail
  <parse>
    @type regexp
    expression /^(?<remote_addr>[^ ]+) \S+ \S+ \[(?<time_local>[^\]]+)\] "(?<request>[^"]+)" (?<status>\d{3}) (?<body_bytes_sent>\d+) "(?<http_referer>[^"]+)" "(?<http_user_agent>[^"]+)" \S+ cache_status=(?<cache_status>\S+) cdn_region=(?<cdn_region>\S+) lat=(?<lat>\S+) rt=(?<request_time>\S+)$/
    time_format %d/%b/%Y:%H:%M:%S %z
    keep_time_key true
    types body_bytes_sent:integer,status:integer,request_time:float,lat:float
  </parse>
  tag nginx.access
  path /var/log/nginx/access.log
  pos_file /tmp/fluent_nginx.pos
  read_from_head true
</source>

# Extract HTTP method and path from request field
<filter nginx.access>
  @type parser
  key_name request
  reserve_data true
  <parse>
    @type regexp
    expression /^(?<method>\w+)\s+(?<path>[^\s]+)(?:\s+(?<http_version>\S+))?/
  </parse>
</filter>

# Generate Prometheus metrics from nginx access logs
<filter nginx.access>
  @type prometheus
  <metric>
    name nginx_http_requests_total
    type counter
    desc Total number of HTTP requests
    <labels>
      method ${method}
      status ${status}
      cache_status ${cache_status}
      cdn_region ${cdn_region}
    </labels>
  </metric>
  
  <metric>
    name nginx_http_request_bytes_total
    type counter
    desc Total bytes sent in HTTP responses
    key body_bytes_sent
    <labels>
      method ${method}
      status ${status}
      cache_status ${cache_status}
    </labels>
  </metric>
  
  <metric>
    name nginx_http_request_duration_seconds
    type histogram
    desc Histogram of HTTP request duration in seconds
    key request_time
    buckets 0.001,0.005,0.01,0.05,0.1,0.5,1.0,5.0,10.0,30.0
    <labels>
      method ${method}
      status ${status}
      cache_status ${cache_status}
    </labels>
  </metric>
  
  <metric>
    name nginx_http_request_latency_seconds
    type histogram
    desc Histogram of request latency in seconds
    key lat
    buckets 0.001,0.005,0.01,0.05,0.1,0.5,1.0,5.0,10.0,30.0
    <labels>
      method ${method}
      status ${status}
      cdn_region ${cdn_region}
    </labels>
  </metric>
  
  <metric>
    name nginx_http_status_code_total
    type counter
    desc Total HTTP requests by status code
    <labels>
      method ${method}
      status ${status}
      path ${path}
    </labels>
  </metric>
  
  <metric>
    name nginx_cache_status_total
    type counter
    desc Total requests by cache status
    <labels>
      method ${method}
      status ${status}
      cache_status ${cache_status}
      cdn_region ${cdn_region}
    </labels>
  </metric>
  
  <metric>
    name nginx_cache_requests_by_status
    type counter
    desc Cache requests grouped by status for ratio calculations
    <labels>
      cache_status ${cache_status}
      cdn_region ${cdn_region}
      method ${method}
    </labels>
  </metric>
</filter>

# Optional: Log parsed records for debugging
<match nginx.access>
  @type stdout
  <format>
    @type json
  </format>
</match>

# System metrics for Fluentd itself
<source>
  @type prometheus_monitor
  <labels>
    host ${hostname}
  </labels>
</source>

<source>
  @type prometheus_output_monitor
  <labels>
    host ${hostname}
  </labels>
</source>